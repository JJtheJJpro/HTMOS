use crate::html::ast::HtmlTree;
use alloc::vec::Vec;
use typed_arena::Arena;

grammar(arena: &'input Arena<HtmlTree<'input>>);

L: &'input str = "<";
R: &'input str = ">";
TEXT: &'input str = r"[a-zA-Z]+";
TAGATTR: (&'input str, &'input str) = <attr:TEXT> "=\"" <v:TEXT> "\"" => (attr, v);
TAGSINGLE: (&'input str, Vec<(&'input str, &'input str)>) = L <name:TEXT> <attr:TAGATTR*> "/" R => (name, attr);
TAGBEGIN: (&'input str, Vec<(&'input str, &'input str)>) = L <name:TEXT> <attr:TAGATTR*> R => (name, attr);
TAGEND: &'input str = L "/" <name:TEXT> R => name;
TAGTEXT = <begin:TAGBEGIN> <text:TEXT> <end:TAGEND>;
pub TAG: &'input HtmlTree<'input> = {
    TAGSINGLE => arena.alloc(HtmlTree::Tag(<>.0, <>.1)),
    <pb:TAGBEGIN> <child:TAG> <pe:TAGEND> => arena.alloc(HtmlTree::PTag(pb.0, pb.1, child)),
    <pb:TAGBEGIN> <pe:TAGEND> => arena.alloc(HtmlTree::Tag(pb.0, pb.1)),
};